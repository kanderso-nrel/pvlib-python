{"project": "pvlib python", "project_url": "https://github.com/pvlib/pvlib-python", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"31": "89cc1fcbd3eee11fe9ae179c9275a24c04820745", "325": "a5888e4755d9f0cb8d729460dd76098e931c89a5", "469": "8c267c8dccc35214d49e2c7184a3b05b4760c42e", "522": "bc682739f0eb1db5caeaa4615dbb13e36de2509a", "548": "db82bacbd012ba53e0e5670b630bb7e088dc1a5e", "591": "612e9ea1f31a1aa4f1ee08bf3dcddae4a1c4bdca", "789": "ccb4422777bac695364c368375c3dc9f8f782619", "809": "73e1df1bca5283c72c83d25e5e9ff5171c84364d", "812": "1f2994b8549abf1200ce913ceba9e7c41f274544", "835": "f773e2dc748fc134a736570e1b8876de1021deb3", "861": "f281b0f0f5fd5681c3d2b74afdd11e9bb5786cef", "871": "44742c55451a49f44f3d9e8c830b623b9dbb9dd6", "883": "04b7a82dd4f429a512cef5d99bcd325c223342c4", "887": "e77dfeed304cb77eb4d6abade40ca934d55a865e", "898": "683dfe4c157d61cefbb3c2ef72044230461dbcc2", "906": "f9f44c7173ca073e2970adc41e554937fd306b4a", "921": "d372fd37aeed52c4d36dec9a541e6330b475515f", "933": "72a7144e83705c86ea02971044264c14037b67a1", "955": "a16850a22be92ec04adc08ed55038b15bdf30ba9", "992": "845a75ac736c00901c5077f2e57902d505e18d71", "1009": "d0512644f4c88343400bd424e1b81c75f68e2691", "1015": "cbd7800355ef5ed782a7023e3c446a18cd6de125", "1016": "15c00eff38d4c31f16f6712e976a63f39af5c952", "1040": "f821a73577e6a114d0fb182cb36bf74f333f74fc", "1041": "70032ab408e30c58077a770ea903c9ad8341b720", "1053": "29b2b0cefd8ee150a43903638d44cc9014f5f700", "1054": "d6213276f63969ab87c0a154cb947152156a6aa6", "1082": "f6bc0c52f7461b67f59123c2c199fac8a940f2da", "1083": "608cc01331e4e64e895e71033430410e859c50e3", "1084": "f38fe07f786b49b3b21f63bbc8bcec18bb42af7c", "1141": "e2a8f31b5eff040c45c8af20ab06942ccc15eb05", "1153": "8fb73a2532333ddb1afc13c1e558b409ded2c8be", "1190": "5a935200fd3ea52cc5c64f2897169bf6f370686e"}, "revision_to_date": {"31": 1402199527000, "325": 1425149935000, "469": 1429557568000, "522": 1436148418000, "548": 1437080494000, "591": 1447455968000, "789": 1458586475000, "809": 1461115259000, "812": 1462030925000, "835": 1466015685000, "861": 1469728068000, "871": 1475719716000, "883": 1481152165000, "887": 1482941150000, "898": 1487445276000, "906": 1496677913000, "921": 1502468763000, "933": 1508281844000, "955": 1526226967000, "992": 1535155850000, "1009": 1536686232000, "1015": 1537206306000, "1016": 1537217754000, "1040": 1544563460000, "1041": 1544651287000, "1053": 1548948599000, "1054": 1548956691000, "1082": 1557939027000, "1083": 1557940970000, "1084": 1557944962000, "1141": 1576692822000, "1153": 1579308754000, "1190": 1584899377000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i5-3320M CPU @ 2.60GHz"], "machine": ["carrots-deluxe"], "num_cpu": ["4"], "os": ["Linux 4.19.0-6-amd64"], "ram": ["7845344"], "python": ["3.7"], "bottleneck": [""], "numexpr": [""], "numpy": [""], "pandas": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-3320M CPU @ 2.60GHz", "machine": "carrots-deluxe", "num_cpu": "4", "os": "Linux 4.19.0-6-amd64", "ram": "7845344", "python": "3.7", "bottleneck": "", "numexpr": "", "numpy": "", "pandas": "", "branch": "master"}], "benchmarks": {"irradiance.TimeSuite.time_aoi": {"code": "class TimeSuite:\n    def time_aoi(self):\n        irradiance.aoi(self.tilt, self.azimuth,\n                       self.solar_position.apparent_zenith,\n                       self.solar_position.azimuth)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_aoi", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "50965af4170b77711b9c314a5cbd5ef7f4726d5ee67d2921d91eed75e0f1f9b4", "warmup_time": -1}, "irradiance.TimeSuite.time_aoi_projection": {"code": "class TimeSuite:\n    def time_aoi_projection(self):\n        irradiance.aoi(self.tilt, self.azimuth,\n                       self.solar_position.apparent_zenith,\n                       self.solar_position.azimuth)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_aoi_projection", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3de6c1879aac4d828a4a6f1a8e219860b96dc8c9d8ebe81810af62caee5f63b7", "warmup_time": -1}, "irradiance.TimeSuite.time_dirindex": {"code": "class TimeSuite:\n    def time_dirindex(self):\n        irradiance.dirindex(self.clearsky_irradiance.ghi,\n                            self.clearsky_irradiance.ghi,\n                            self.clearsky_irradiance.dni,\n                            self.solar_position.apparent_zenith,\n                            self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_dirindex", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fa5d74f22cabd99f38270652def1a89ab651c04b807a5e7f5900c3306d1984e2", "warmup_time": -1}, "irradiance.TimeSuite.time_dirint": {"code": "class TimeSuite:\n    def time_dirint(self):\n        irradiance.dirint(self.clearsky_irradiance.ghi,\n                          self.solar_position.apparent_zenith,\n                          self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_dirint", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "78b49c7c69d2a905dd0c8198ae442d474ef8657a059c97125095a629baf3d92b", "warmup_time": -1}, "irradiance.TimeSuite.time_disc": {"code": "class TimeSuite:\n    def time_disc(self):\n        irradiance.disc(self.clearsky_irradiance.ghi,\n                        self.solar_position.apparent_zenith,\n                        self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_disc", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9ad866653a5d1d13bc2047a224a2cdf0a0435201882da83a03e924138db776d4", "warmup_time": -1}, "irradiance.TimeSuite.time_erbs": {"code": "class TimeSuite:\n    def time_erbs(self):\n        irradiance.erbs(self.clearsky_irradiance.ghi,\n                        self.solar_position.apparent_zenith,\n                        self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_erbs", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5941e5a1e183b9f8928346a117bc11a816a127584f4239dc7912b4f706d639d3", "warmup_time": -1}, "irradiance.TimeSuite.time_get_extra_radiation": {"code": "class TimeSuite:\n    def time_get_extra_radiation(self):\n        irradiance.get_extra_radiation(self.days)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_get_extra_radiation", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5e81a7bd20b140c57341ab396ade6d5b3dc924a58abd2050f8349f8f007acb34", "warmup_time": -1}, "irradiance.TimeSuite.time_get_ground_diffuse": {"code": "class TimeSuite:\n    def time_get_ground_diffuse(self):\n        irradiance.get_ground_diffuse(self.tilt, self.clearsky_irradiance.ghi)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_get_ground_diffuse", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8931595a6fee7a0e144ce1cbe63cf8148a3d014c2a211a4c73488789359c1efb", "warmup_time": -1}, "irradiance.TimeSuite.time_get_total_irradiance": {"code": "class TimeSuite:\n    def time_get_total_irradiance(self):\n        irradiance.get_total_irradiance(self.tilt, self.azimuth,\n                                        self.solar_position.apparent_zenith,\n                                        self.solar_position.azimuth,\n                                        self.clearsky_irradiance.dni,\n                                        self.clearsky_irradiance.ghi,\n                                        self.clearsky_irradiance.dhi)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_get_total_irradiance", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "30a79c4c9c67ca1f0b85f794cf19c2cb68ef51fdc8182397d3236e7b2a3483f1", "warmup_time": -1}, "irradiance.TimeSuite.time_gti_dirint": {"code": "class TimeSuite:\n    def time_gti_dirint(self):\n        irradiance.gti_dirint(poa_global=self.clearsky_irradiance.ghi * 1.3,\n                              aoi=self.aoi,\n                              solar_zenith=self.solar_position.apparent_zenith,\n                              solar_azimuth=self.solar_position.azimuth,\n                              times=self.times,\n                              surface_tilt=self.tilt,\n                              surface_azimuth=self.azimuth)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)", "min_run_count": 2, "name": "irradiance.TimeSuite.time_gti_dirint", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d28883a49a37206f61ebe5c5ebe2d9df254f183ab63364acf2040512d90ce87e", "warmup_time": -1}, "location.TimeSuite.time_location_get_airmass": {"code": "class TimeSuite:\n    def time_location_get_airmass(self):\n        self.location.get_airmass(solar_position=self.solar_position)\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)", "min_run_count": 2, "name": "location.TimeSuite.time_location_get_airmass", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "896610ba2c4b111cf70e42ac4e9a71eef87f5ee4fb795926c229a0b09055789d", "warmup_time": -1}, "location.TimeSuite.time_location_get_clearsky": {"code": "class TimeSuite:\n    def time_location_get_clearsky(self):\n        self.location.get_clearsky(times=self.times,\n                                   solar_position=self.solar_position)\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)", "min_run_count": 2, "name": "location.TimeSuite.time_location_get_clearsky", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7089fc94cfbb08e6ef45f59f9f65765d35e885fe53ab4b4b10fa64b29bea1a22", "warmup_time": -1}, "location.TimeSuite.time_location_get_solarposition": {"code": "class TimeSuite:\n    def time_location_get_solarposition(self):\n        self.location.get_solarposition(times=self.times)\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)", "min_run_count": 2, "name": "location.TimeSuite.time_location_get_solarposition", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f440de0b3fdb1a65ab833e7c8060f1ef019af5ff8c979e098cc668973d1720eb", "warmup_time": -1}, "location.TimeSuite.time_location_get_sun_rise_set_transit_pyephem": {"code": "class TimeSuite:\n    def time_location_get_sun_rise_set_transit_pyephem(self):\n        self.location.get_sun_rise_set_transit(times=self.days,\n                                               method='pyephem')\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)", "min_run_count": 2, "name": "location.TimeSuite.time_location_get_sun_rise_set_transit_pyephem", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d85ac70306cccd8264d972f2983976f6cc187b4d295be3241d0d8e28a21da9f8", "warmup_time": -1}, "location.TimeSuite.time_location_get_sun_rise_set_transit_spa": {"code": "class TimeSuite:\n    def time_location_get_sun_rise_set_transit_spa(self):\n        self.location.get_sun_rise_set_transit(times=self.days,\n                                               method='spa')\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)", "min_run_count": 2, "name": "location.TimeSuite.time_location_get_sun_rise_set_transit_spa", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c7662d38aefb843bc75f8f5f31e35eb206646825fe0ed7f68fde84657ec0a05d", "warmup_time": -1}, "solarposition.TimeSuite.time_ephemeris": {"code": "class TimeSuite:\n    def time_ephemeris(self):\n        solarposition.ephemeris(self.times, self.lat, self.lon)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6", "min_run_count": 2, "name": "solarposition.TimeSuite.time_ephemeris", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d720557975548221137d8479573475421266842842eb418904fe9aebfc36ff37", "warmup_time": -1}, "solarposition.TimeSuite.time_ephemeris_localized": {"code": "class TimeSuite:\n    def time_ephemeris_localized(self):\n        solarposition.ephemeris(self.times_localized, self.lat, self.lon)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6", "min_run_count": 2, "name": "solarposition.TimeSuite.time_ephemeris_localized", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ec8291a048071446aed78a29bac9a0075431eafe0cd22b17bf5fc478abb4287a", "warmup_time": -1}, "solarposition.TimeSuite.time_nrel_earthsun_distance": {"code": "class TimeSuite:\n    def time_nrel_earthsun_distance(self):\n        solarposition.nrel_earthsun_distance(self.times_localized)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6", "min_run_count": 2, "name": "solarposition.TimeSuite.time_nrel_earthsun_distance", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a7afedbc2824ae6ab44f88964a7b0b305b3747945a62265c512d5eb325a42d14", "warmup_time": -1}, "solarposition.TimeSuite.time_spa_python": {"code": "class TimeSuite:\n    def time_spa_python(self):\n        solarposition.spa_python(self.times_localized[::5], self.lat, self.lon)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6", "min_run_count": 2, "name": "solarposition.TimeSuite.time_spa_python", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "19a86b9c218f465e892dc2d8d9ae59458723627324f1b9c6f0cdd6f76c0edb82", "warmup_time": -1}, "solarposition.TimeSuite.time_sun_rise_set_transit_spa": {"code": "class TimeSuite:\n    def time_sun_rise_set_transit_spa(self):\n        solarposition.sun_rise_set_transit_spa(self.times_localized[::30],\n                                               self.lat, self.lon)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6", "min_run_count": 2, "name": "solarposition.TimeSuite.time_sun_rise_set_transit_spa", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a4b32eec9e94c5fc3b7640a10a9dcdcdb0fb2a44feb80642bea8c4fff1bdd733", "warmup_time": -1}, "tracking.TimeSuite.time_singleaxis": {"code": "class TimeSuite:\n    def time_singleaxis(self):\n        tracking.singleaxis(self.solar_position.apparent_zenith,\n                            self.solar_position.azimuth,\n                            axis_tilt=0,\n                            axis_azimuth=0,\n                            max_angle=60,\n                            backtrack=True,\n                            gcr=0.45)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.lat = 35.1\n        self.lon = -106.6\n        self.solar_position = solarposition.get_solarposition(self.times,\n                                                              self.lat,\n                                                              self.lon)\n        self.tracker = tracking.SingleAxisTracker()", "min_run_count": 2, "name": "tracking.TimeSuite.time_singleaxis", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a87b85526a4cb2c7959ad642d1b7f0ec3e94d5f2a0c06fdf631ceef31f43a232", "warmup_time": -1}, "tracking.TimeSuite.time_tracker_singleaxis": {"code": "class TimeSuite:\n    def time_tracker_singleaxis(self):\n        self.tracker.singleaxis(self.solar_position.apparent_zenith,\n                                self.solar_position.azimuth)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.lat = 35.1\n        self.lon = -106.6\n        self.solar_position = solarposition.get_solarposition(self.times,\n                                                              self.lat,\n                                                              self.lon)\n        self.tracker = tracking.SingleAxisTracker()", "min_run_count": 2, "name": "tracking.TimeSuite.time_tracker_singleaxis", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "12990e366253a4825e523990420c10431f76d053128ab67576d7c56498ed2c42", "warmup_time": -1}}, "machines": {"carrots-deluxe": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-3320M CPU @ 2.60GHz", "machine": "carrots-deluxe", "num_cpu": "4", "os": "Linux 4.19.0-6-amd64", "ram": "7845344", "version": 1}}, "tags": {"0.1": 469, "prearizona": 31, "pvliborg": 325, "v0.2.0": 522, "v0.2.1": 548, "v0.2.2": 591, "v0.3.0": 789, "v0.3.1": 809, "v0.3.2": 812, "v0.3.3": 835, "v0.4.0": 861, "v0.4.1": 871, "v0.4.2": 883, "v0.4.3": 887, "v0.4.4": 898, "v0.4.5": 906, "v0.5.0": 921, "v0.5.1": 933, "v0.5.2": 955, "v0.6.0": 1016, "v0.6.0-alpha": 992, "v0.6.0-alpha2": 1009, "v0.6.0-beta": 1015, "v0.6.1": 1054, "v0.6.1-alpha": 1040, "v0.6.1-beta": 1041, "v0.6.1-beta.2": 1053, "v0.6.2": 1083, "v0.6.2-rc.1": 1082, "v0.6.3": 1084, "v0.6.3-rc.1": 1084, "v0.7.0": 1141, "v0.7.1": 1153}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}